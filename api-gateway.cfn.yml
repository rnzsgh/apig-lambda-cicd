---

# Any code, applications, scripts, templates, proofs of concept,
# documentation and other items are provided for illustration purposes only.

AWSTemplateFormatVersion: 2010-09-09


Parameters:

  # For EDGE deployments, this cert must be in us-east-1
  CertificateArn:
    Type: String
    Description: The SSL/TLS certificate ARN
    MinLength: 0
    MaxLength: 2048
    Default: ""

  DomainName:
    Type: String
    Description: Domain name for the API Gateway
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid domain name

  HostedZoneName:
    Type: String
    Description: The Amazon Route 53 Hosted Zone Name for the optional load balancer alias record - do not include a period at the end
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name

  EndpointType:
    Type: String
    Description: Endpoint type - EDGE or REGIONAL
    Default: EDGE
    AllowedValues:
      - EDGE
      - REGIONAL
    ConstraintDescription: Specify either EDGE or REGIONAL

  GitSourceRepo:
    Type: String
    Description: GitHub source repository - must contain a Dockerfile in the base for the build

  GitBranch:
    Type: String
    Default: master
    Description: GitHub git repository branch - change triggers a new build

  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub API token - https://github.com/blog/1509-personal-api-tokens

  GitHubUser:
    Type: String
    Description: GitHub username or organization

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/python:3.7.1-1.7.0

  LambdaReleaseBucketName:
    Type: String


Conditions:

  IsCustomHostnameTlsEnabled: !And
    - !Not [ !Equals [ !Ref CertificateArn, "" ] ]
    - !Not [ !Equals [ !Ref DomainName, "" ] ]

  CreateRoute53Record: !And
    - !Not [ !Equals [ !Ref DomainName, "" ] ]
    - !Not [ !Equals [ !Ref HostedZoneName, "" ] ]

  IsEdge : !Equals [ !Ref EndpointType, EDGE ]

  IsRegional: !Equals [ !Ref EndpointType, REGIONAL ]

  CreateRoute53RecordEdge: !And
    - !Condition CreateRoute53Record
    - !Condition IsEdge

  CreateRoute53RecordRegional: !And
    - !Condition CreateRoute53Record
    - !Condition IsRegional


Mappings:

  ApiGatewayHostedZoneIdRegionMap:
    us-east-2:
      HostedZoneId: ZOJJZC49E0EPZ
    us-east-1:
      HostedZoneId: Z1UJRXOUMOOFQ8
    us-west-1:
      HostedZoneId: Z2MUQ32089INYE
    us-west-2:
      HostedZoneId: Z2OJLYMUO9EFXC
    ap-south-1:
      HostedZoneId: Z3VO1THU9YC4UR
    ap-northeast-3:
      HostedZoneId: Z2YQB5RD63NC85
    ap-northeast-2:
      HostedZoneId: Z20JF4UZKIW1U8
    ap-southeast-1:
      HostedZoneId: ZL327KTPIQFUL
    ap-southeast-2:
      HostedZoneId: Z2RPCDW04V8134
    ap-northeast-1:
      HostedZoneId: Z1YSHQZHG15GKL
    ca-central-1:
      HostedZoneId: Z19DQILCV0OWEC
    eu-central-1:
      HostedZoneId: Z1U9ULNL0V5AJ3
    eu-west-1:
      HostedZoneId: ZLY8HYME6SFDD
    eu-west-2:
      HostedZoneId: ZJ5UAJN8Y3Z2Q
    eu-west-3:
      HostedZoneId: Z3KY65QIEKYHQQ
    eu-north-1:
      HostedZoneId: Z2YB950C88HT6D
    sa-east-1:
      HostedZoneId: ZCMLWB8V5SYIT


Resources:

  # CI/CD ######################################################################

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  LogGroupBuild:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /build/lambda/${AWS::StackName}

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        EnvironmentVariables:
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: LAMBDA_BUCKET
            Value: !Ref LambdaReleaseBucketName
          - Name: STACK_NAME
            Value: !Ref AWS::StackName
      Name: !Sub ${AWS::StackName}-lambda-build
      ServiceRole: !Ref CodeBuildServiceRole
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref LogGroupBuild

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/build/lambda/${AWS::StackName}:log-stream:*
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:s3:::${LambdaReleaseBucketName}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: '*'
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:PublishVersion

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !GetAtt CodeBuildProject.Arn
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitSourceRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1


  # API Gateway ################################################################

  ApiGatewayV1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /apig/${AWS::StackName}-v1

  ApiCloudWatchAccountRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiCloudWatchAccountRole.Arn

  ApiCertificate:
    Type: AWS::ApiGateway::ClientCertificate

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: IsCustomHostnameTlsEnabled
    Properties:
      CertificateArn: !If [ IsEdge, !Ref CertificateArn, !Ref "AWS::NoValue" ]
      RegionalCertificateArn: !If [ IsRegional, !Ref CertificateArn, !Ref "AWS::NoValue" ]
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - !Ref EndpointType

  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref Api

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - !Ref EndpointType
    DependsOn: ApiAccount

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Api
    DependsOn: ApiPingMethod

  ApiV1Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      ClientCertificateId: !Ref ApiCertificate
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref Api
      StageName: v1
      TracingEnabled: false
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayV1LogGroup.Arn
      MethodSettings:
        - HttpMethod: '*'
          DataTraceEnabled: true
          MetricsEnabled: true
          LoggingLevel: INFO
          ResourcePath: /*
      Variables:
        LambdaAlias: V1
    DependsOn: ApiAccount

  # Redirect Lambda ############################################################

  ApiRedirectResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: redirect
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId

  ApiRedirectMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiRedirectResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: GetRedirect
      MethodResponses:
        - StatusCode: 302
          ResponseParameters:
            method.response.header.Location: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 302
            ResponseParameters:
              method.response.header.Location: integration.response.header.location
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${arn}:${!stageVariables.LambdaAlias}/invocations
          - arn: !GetAtt RedirectLambda.Arn

  RedirectLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RedirectLambdaV1Alias
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/redirect
    DependsOn:
      - ApiRedirectMethod
      - ApiV1Stage

  RedirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaReleaseBucketName
        S3Key: redirect.zip
      Description: !Sub ${AWS::StackName} Redirect
      FunctionName: !Sub ${AWS::StackName}-redirect
      Handler: app.handler
      MemorySize: 128
      Role: !GetAtt DefaultLambdaExecutionIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  RedirectLambdaV1Alias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref RedirectLambda
      FunctionVersion: $LATEST
      Name: V1

  # Fish Lambda ################################################################

  ApiFishResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: fish
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId

  ApiFishMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiFishResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: GetFish
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${arn}:${!stageVariables.LambdaAlias}/invocations
          - arn: !GetAtt FishLambda.Arn

  FishLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FishLambdaV1Alias
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/fish
    DependsOn:
      - ApiFishMethod
      - ApiV1Stage

  FishLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaReleaseBucketName
        S3Key: fish.zip
      Description: !Sub ${AWS::StackName} Fish
      FunctionName: !Sub ${AWS::StackName}-fish
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt DefaultLambdaExecutionIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  FishLambdaV1Alias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref FishLambda
      FunctionVersion: $LATEST
      Name: V1

  # Ping Lambda ################################################################

  ApiPingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: ping
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId

  ApiPingMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiPingResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: GetPing
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${arn}:${!stageVariables.LambdaAlias}/invocations
          - arn: !GetAtt PingLambda.Arn

  PingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PingLambdaV1Alias
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/ping
    DependsOn:
      - ApiPingMethod
      - ApiV1Stage

  PingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': 'ok',
              'headers': { 'Content-Type': 'text/plain' },
              'statusCode': 200
            }
      Description: !Sub ${AWS::StackName} Ping Check
      FunctionName: !Sub ${AWS::StackName}-ping
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt DefaultLambdaExecutionIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  PingLambdaV1Alias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref PingLambda
      FunctionVersion: $LATEST
      Name: V1

  # General Lambda  ############################################################

  DefaultLambdaExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Route 53 / DNS #############################################################

  # Edge deployment api gateway - https://docs.aws.amazon.com/general/latest/gr/rande.html
  Route53RecordEdge:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53RecordEdge
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Name: !Sub ${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Same for all edge optimized

  # Regional deployment api gateway - https://docs.aws.amazon.com/general/latest/gr/rande.html
  Route53RecordRegional:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53RecordRegional
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Name: !Sub ${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !FindInMap [ ApiGatewayHostedZoneIdRegionMap, !Ref "AWS::Region", HostedZoneId ]


Outputs:

  ApiId:
    Value: !Ref Api
    Export:
      Name: !Sub ${AWS::StackName}-ApiId

  ApiRootResourceId:
    Value: !GetAtt Api.RootResourceId
    Export:
      Name: !Sub ${AWS::StackName}-ApiRootResourceId

  ApiDeploymentId:
    Value: !Ref ApiDeployment
    Export:
      Name: !Sub ${AWS::StackName}-ApiDeploymentId

  PingLambdaName:
    Value: !Sub ${AWS::StackName}-PingLambdaName
    Export:
      Name: !Sub ${AWS::StackName}-PingLambdaName

  PingLambdaArn:
    Value: !GetAtt PingLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PingLambdaArn

  ApiV1InvokeBareUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/v1
    Export:
      Name: !Sub ${AWS::StackName}-ApiV1InvokeBareUrl

  ApiV1InvokeUrl:
    Value: !Sub https://${DomainName}/v1
    Export:
      Name: !Sub ${AWS::StackName}-ApiV1InvokeUrl

  CodePipelineArtifactBucketName:
    Value: !Ref CodePipelineArtifactBucket
    Export:
      Name: !Sub ${AWS::StackName}-CodePipelineArtifactBucketName

  CodePipelineArtifactBucketArn:
    Value: !GetAtt CodePipelineArtifactBucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CodePipelineArtifactBucketArn

