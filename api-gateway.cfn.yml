---

# Any code, applications, scripts, templates, proofs of concept,
# documentation and other items are provided for illustration purposes only.

AWSTemplateFormatVersion: 2010-09-09


Parameters:

  CertificateArn:
    Type: String
    Description: The SSL/TLS certificate ARN
    MinLength: 0
    MaxLength: 2048
    Default: ""

  DomainName:
    Type: String
    Description: Domain name for the API Gateway
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid domain name

  HostedZoneName:
    Type: String
    Description: The Amazon Route 53 Hosted Zone Name for the optional load balancer alias record - do not include a period at the end
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name


Conditions:

  IsCustomHostnameTlsEnabled: !And
    - !Not [ !Equals [ !Ref CertificateArn, "" ] ]
    - !Not [ !Equals [ !Ref DomainName, "" ] ]

  CreateRoute53Record: !And
    - !Not [ !Equals [ !Ref DomainName, "" ] ]
    - !Not [ !Equals [ !Ref HostedZoneName, "" ] ]


Resources:

  ApiGatewayProdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /apig/${AWS::StackName}-prod

  ApiGatewayDevLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /apig/${AWS::StackName}-dev

  ApiCloudWatchAccountRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiCloudWatchAccountRole.Arn

  ApiCertificate:
    Type: AWS::ApiGateway::ClientCertificate

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: IsCustomHostnameTlsEnabled
    Properties:
      CertificateArn: !Ref CertificateArn
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - EDGE

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - EDGE
    DependsOn: ApiAccount

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Api
    DependsOn: ApiPingMethod

  ApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      ClientCertificateId: !Ref ApiCertificate
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref Api
      StageName: p
      TracingEnabled: false # TODO: Enable this
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayProdLogGroup.Arn
      MethodSettings:
        - HttpMethod: '*'
          DataTraceEnabled: true
          MetricsEnabled: true
          LoggingLevel: INFO
          ResourcePath: /*
      Variables:
        LambdaAlias: PROD
    DependsOn: ApiAccount

  ApiDevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      ClientCertificateId: !Ref ApiCertificate
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref Api
      StageName: d
      TracingEnabled: false # TODO: Enable this
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayDevLogGroup.Arn
      MethodSettings:
        - HttpMethod: '*'
          DataTraceEnabled: true
          MetricsEnabled: true
          LoggingLevel: INFO
          ResourcePath: /*
      Variables:
        LambdaAlias: DEV
    DependsOn: ApiAccount

  ApiPingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: ping
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId

  ApiPingMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiPingResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: GetPing
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${arn}:${!stageVariables.LambdaAlias}/invocations
          - arn: !GetAtt PingLambda.Arn

  PingLambdaDevPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PingLambdaDevAlias
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/ping
    DependsOn:
      - ApiPingMethod
      - ApiDevStage

  PingLambdaProdPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PingLambdaProdAlias
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/ping
    DependsOn:
      - ApiPingMethod
      - ApiProdStage

  PingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': 'ok',
              'headers': { 'Content-Type': 'text/plain' },
              'statusCode': 200
            }
      Description: !Sub ${AWS::StackName} Ping Check
      FunctionName: !Sub ${AWS::StackName}-ping
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt PingLambdaExecutionIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  PingLambdaDevAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref PingLambda
      FunctionVersion: $LATEST
      Name: DEV

  PingLambdaProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref PingLambda
      FunctionVersion: $LATEST
      Name: PROD

  PingLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ping
      RetentionInDays: 90

  PingLambdaExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  Route53Record:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Name: !Sub ${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.DistributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Edge deployment api gateway - https://docs.aws.amazon.com/general/latest/gr/rande.html


Outputs:

  ApiId:
    Value: !Ref Api
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-id

  ApiRootResourceId:
    Value: !GetAtt Api.RootResourceId
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-root-resource-id

  ApiDeploymentId:
    Value: !Ref ApiDeployment
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-deployment-id

  PingLambdaName:
    Value: !Sub ${AWS::StackName}-lambda-ping
    Export:
      Name: !Sub ${AWS::StackName}-lambda-ping-name

  PingLambdaArn:
    Value: !GetAtt PingLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-ping-lambda-arn

  ApiDevInvokeBareUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/d
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-bare-url-dev

  ApiProdInvokeBareUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/p
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-bare-url-prod

  ApiDevInvokeUrl:
    Value: !Sub https://${DomainName}/d
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-url-dev

  ApiProdInvokeUrl:
    Value: !Sub https://${DomainName}/p
    Export:
      Name: !Sub ${AWS::StackName}-api-gateway-url-prod

